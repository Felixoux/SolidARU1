form {
  @extend %stack;
  gap: calc(var(--gap) * 2);
}

.grid-form {
  @include up(900) {
    display: grid;
    grid-template-columns:1fr 1fr;

    .content-form {
      grid-column: 1 / 2;
      grid-row: 2 / 3;
    }

    .content-post{
      display: flex;
      flex-direction: column;
      grid-column: 2 / 3;
    }

    .content-category {
      display: flex;
      flex-direction: column;
      grid-column: 2 / 3;
    }

    button {
      align-self: flex-end;
    }

  }
}

label {
  color: var(--bright-text);
  margin-bottom: 1rem;
  text-transform: uppercase;
  font-family: var(--font);
  font-size: .85em;
}

input[type=text],input[type=select],input[type=file],input[type=password], input[type=email], textarea, select {
  background: var(--bg-dark);
  padding: .8em;
  border: 1px solid var(--border);
  border-radius: 3px;
  color: var(--text);
  display: block;
  width: 100%;
  outline: 0;
  min-height: 48px;
}

textarea {
  min-height: 300px;
}

select {
  min-height: 150px;
}

input:focus, textarea:focus, select:focus {
  border-color: var(--primary_b);
  box-shadow: 0 0 0 3px var(--primary_b25);
}

.form-group {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.form__button {
  @extend .flex;
}

.form-card {
  @extend .container-margin;
  @extend .flex-center;
  margin: calc(var(--space-section) / 2) auto;
  max-width: 450px;
  flex-direction: column;
}

.form-card > form {
  @extend .card;
  padding: calc(var(--card-padding) * 1.3);
}

.form-card__title {
  font-family: var(--font-semi);
  margin-bottom: 2rem;
}

.thumbnail-form {
  display: flex;
  align-items: flex-end;
  width: 100%;
  margin-top:auto;
  @include down(900) {
    margin-top: calc(var(--gap) * 2);
  }
}

.thumbnail-form > div {
  margin-right:2rem;
}

// Rester connecter login
.login-form {
  display: block!important;
}
.login-form > * + * {
  margin-top: calc(3 * var(--space));
}

// theme-switcher
.theme-switcher {
  display: inline-block;
}

.form-switch {
  position: relative;
  cursor: pointer;
}

.form-switch input {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  cursor: pointer;
  min-height: auto;
}

.form-switch label {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  cursor: pointer;
  margin-bottom: 0 !important;
}

.label {
  text-transform: uppercase;
  font-weight: 300;
  font-size: .85em;
}

input:checked + label .switch {
  background: var(--primary_b);
}

.theme-switcher input:checked + label .switch {
  background: var(--bg-dark) !important;
}

.switch {
  flex: none;
  width: 55px;
  height: 26px;
  display: inline-block;
  background: var(--bg-dark);
  border: 1px solid var(--border);
  box-shadow: 0 1px 4px rgba(213, 222, 233, .2);
  border-radius: 100px;
  margin-right: calc(1 * var(--space));
  transition: background .3s;
}

.switch::before {
  content: "";
  display: block;
  height: 24px;
  width: 24px;
  background: var(--background-light);
  border: 1px solid var(--border);
  box-shadow: 0 1px 4px rgba(213, 222, 233, .2);
  border-radius: 100px;
  transition: transform .3s;
}

.theme-switcher input:checked + label .switch::before {
  background: var(--primary_b) !important;
}

input:checked + label .switch::before {
  transform: translateX(31px);
}

// Markdown editor
.markDownEditor {
  display: block;
}

.editor-toolbar {
  margin-top: 1rem;
}

.editor-toolbar a.fa {
  color: var(--bright-text) !important;
}

.editor-toolbar a.fa:hover {
  background: var(--muted-text) !important;
  color: var(--bright-text) !important;
}

.CodeMirror {
  span {
    background: none !important;
  }
}

.markDownEditor .CodeMirror { // Textarea de l'Ã©diteur
  background: var(--bg-dark);
  color: var(--text);
}

.editor-toolbar, .CodeMirror {
  border: 1px solid var(--border) !important;
}

.editor-preview, .editor-preview-side {
  background: var(--bg-dark) !important;
  border: none !important;
}



